#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

layout (local_size_x = WORKGROUP_SIZE_X, local_size_y = WORKGROUP_SIZE_Y, local_size_z = WORKGROUP_SIZE_Z) in;

struct Pixel{
  vec4 value;
  uvec4 numWorkGroups;
  uvec4 workGroupSize;
  uvec4 workGroupID;
  uvec4 localInvocationID;
  uvec4 globalInvocationID;
  uvec4 localInvocationIndex;
  uvec4 subgroup;
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

void main() {
  uint SGID = gl_SubgroupID;            // core
  uint NumSG = gl_NumSubgroups;

  uint SGIID = gl_SubgroupInvocationID; // core
  uint SGS = gl_SubgroupSize;

  uvec3 WGID = gl_WorkGroupID;          // core
  uvec3 NumWG = gl_NumWorkGroups;

  uint LIInd = gl_LocalInvocationIndex;
  uvec3 LIID = gl_LocalInvocationID;
  uvec3 WGS = gl_WorkGroupSize;

  uvec3 GIID = gl_GlobalInvocationID;

  uint idx = WIDTH * HEIGHT * GIID.z + WIDTH * GIID.y + GIID.x;

  if (GIID.x >= WIDTH || GIID.y >= HEIGHT || GIID.z >= DEPTH)
    return;

#if 1
  float x = float(GIID.x) / float(WIDTH);
  float y = float(GIID.y) / float(HEIGHT);
  float z = float(GIID.z) / float(DEPTH);

  vec2 uv = vec2(x,y);
  float n = 0.0;
  vec2 c = vec2(-.445, 0.0) +  (uv - 0.5) * (2.0 + 1.7 * 0.2),
  zz = vec2(0.0);
  const int M = 128;
  for (int j = 0; j < 100; ++j)
  {
    zz = vec2(0.0);
    n = 0.0;
    for (int i = 0; i < M; i++)
    {
      zz = vec2(zz.x * zz.x - zz.y * zz.y, 2. * zz.x * zz.y) + c;
      if (dot(zz, zz) > 2)
        break;
      n++;
    }
  }
          
  float t = float(n) / float(M);
  vec3 d = vec3(0.3, 0.3 ,0.5);
  vec3 e = vec3(-0.2, -0.3 ,-0.5);
  vec3 f = vec3(2.1, 2.0, 3.0);
  vec3 g = vec3(0.0, 0.1, 0.0);
  vec4 color = vec4(d + e * cos(6.28318 * (f * t + g)) * (1 - z), 1.0);
#else
  vec4 color = vec4(0.1, 0.2, 0.3, 0.4);
#endif

  imageData[idx].value = color;
  imageData[idx].numWorkGroups = uvec4(NumWG, 0);
  imageData[idx].workGroupSize = uvec4(WGS, 0);
  imageData[idx].workGroupID = uvec4(WGID, 0);
  imageData[idx].localInvocationID = uvec4(LIID, 0);
  imageData[idx].globalInvocationID = uvec4(GIID, 0);
  imageData[idx].localInvocationIndex = uvec4(LIInd, 0, 0, 0);
  imageData[idx].subgroup = uvec4(SGID, SGIID, SGS, NumSG);
}
