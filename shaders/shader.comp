#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 3200/64
#define HEIGHT 2400/64
#define WORKGROUP_SIZE_X 32
#define WORKGROUP_SIZE_Y 32

layout (local_size_x = WORKGROUP_SIZE_X, local_size_y = WORKGROUP_SIZE_Y, local_size_z = 1 ) in;

struct Pixel{
  vec4 value;
  uvec4 numWorkGroups;
  uvec4 workGroupSize;
  uvec4 workGroupID;
  uvec4 localInvocationID;
  uvec4 globalInvocationID;
  uvec4 localInvocationIndex;
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

void main() {

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

  float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
  float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

  /*
  What follows is code for rendering the mandelbrot set. 
  */
  vec2 uv = vec2(x,y);
  float n = 0.0;
  vec2 c = vec2(-.445, 0.0) +  (uv - 0.5)*(2.0+ 1.7*0.2  ), 
  z = vec2(0.0);
  const int M =128;
  for (int j = 0; j < 12000; ++j) {
  z = vec2(0.0);
  n = 0.0;
  for (int i = 0; i<M; i++)
  {
    z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
    if (dot(z, z) > 2) break;
    n++;
  }
  }
          
  // we use a simple cosine palette to determine color:
  // http://iquilezles.org/www/articles/palettes/palettes.htm         
  float t = float(n) / float(M);
  vec3 d = vec3(0.3, 0.3 ,0.5);
  vec3 e = vec3(-0.2, -0.3 ,-0.5);
  vec3 f = vec3(2.1, 2.0, 3.0);
  vec3 g = vec3(0.0, 0.1, 0.0);
  vec4 color = vec4( d + e*cos( 6.28318*(f*t+g) ) ,1.0);

  // store the rendered mandelbrot set into a storage buffer:
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].numWorkGroups = uvec4(gl_NumWorkGroups, 0);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].workGroupSize = uvec4(gl_WorkGroupSize, 0);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].workGroupID = uvec4(gl_WorkGroupID, 0);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].localInvocationID = uvec4(gl_LocalInvocationID, 0);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].globalInvocationID = uvec4(gl_GlobalInvocationID, 0);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].localInvocationIndex = uvec4(gl_LocalInvocationIndex, 0, 0, 0);
}
